import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
// sop
import { ActorSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Actor";
import { AreaLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/AreaLight";
import { AttribPromoteSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/AttribPromote";
import { AttribRenameSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/AttribRename";
import { BoxSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Box";
import { CameraControlsSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CameraControls";
import { CopySopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Copy";
import { HemisphereLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/HemisphereLight";
import { MaterialSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Material";
import { MaterialsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/MaterialsNetwork";
import { MergeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Merge";
import { PaletteSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Palette";
import { PerspectiveCameraSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PerspectiveCamera";
import { PlaneSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Plane";
import { PolarTransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PolarTransform";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";
// actor
import { FloatToVec3ActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/FloatToVec3";
import { OnObjectHoverActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/OnObjectHover";
import { OnTickActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/OnTick";
import { SetObjectMaterialColorActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/SetObjectMaterialColor";
import { SetObjectScaleActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/SetObjectScale";
import { TwoWaySwitchActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/TwoWaySwitch";
import { Vec3ToColorActorNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/actor/Vec3ToColor";
// mat
import { MeshStandardBuilderMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandardBuilder";
import { MeshStandardMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandard";

export class PolySceneWithNodeMap_scene_01 extends PolyScene {
  node(path: "/cameras"): GeoObjNode;
  node(path: "/cameras/perspectiveCamera_MAIN"): PerspectiveCameraSopNode;
  node(path: "/cameras/perspectiveCamera_DEBUG"): PerspectiveCameraSopNode;
  node(path: "/cameras/merge1"): MergeSopNode;
  node(path: "/cameras/polarTransform1"): PolarTransformSopNode;
  node(path: "/cameras/cameraControls1"): CameraControlsSopNode;
  node(
    path: "/cameras/cameraControls1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/lights"): GeoObjNode;
  node(path: "/lights/hemisphereLight1"): HemisphereLightSopNode;
  node(path: "/lights/areaLight1"): AreaLightSopNode;
  node(path: "/lights/polarTransform1"): PolarTransformSopNode;
  node(path: "/lights/merge1"): MergeSopNode;
  node(path: "/boxes"): GeoObjNode;
  node(path: "/boxes/box1"): BoxSopNode;
  node(path: "/boxes/plane1"): PlaneSopNode;
  node(path: "/boxes/copy1"): CopySopNode;
  node(path: "/boxes/palette1"): PaletteSopNode;
  node(path: "/boxes/attribRename1"): AttribRenameSopNode;
  node(path: "/boxes/material1"): MaterialSopNode;
  node(path: "/boxes/attribPromote1"): AttribPromoteSopNode;
  node(path: "/boxes/actor1"): ActorSopNode;
  node(path: "/boxes/actor1/onTick1"): OnTickActorNode;
  node(path: "/boxes/actor1/onObjectHover1"): OnObjectHoverActorNode;
  node(path: "/boxes/actor1/twoWaySwitch1"): TwoWaySwitchActorNode;
  node(path: "/boxes/actor1/setObjectScale1"): SetObjectScaleActorNode;
  node(path: "/boxes/actor1/floatToVec3_2"): FloatToVec3ActorNode;
  node(path: "/boxes/actor1/twoWaySwitch2"): TwoWaySwitchActorNode;
  node(path: "/boxes/actor1/twoWaySwitch3"): TwoWaySwitchActorNode;
  node(
    path: "/boxes/actor1/setObjectMaterialColor1"
  ): SetObjectMaterialColorActorNode;
  node(path: "/boxes/actor1/vec3ToColor1"): Vec3ToColorActorNode;
  node(path: "/boxes/actor1/floatToVec3_1"): FloatToVec3ActorNode;
  node(path: "/boxes/MAT"): MaterialsNetworkSopNode;
  node(path: "/boxes/MAT/meshStandard1"): MeshStandardMatNode;
  node(path: "/boxes/MAT/meshStandardBuilder1"): MeshStandardBuilderMatNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_scene_01 {
  "cameras--transform"?: ParamValueSerializedTypeMap["folder"];
  "cameras--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "cameras--t"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--t-tx"?: ParamValueSerializedTypeMap["float"];
  "cameras--t-ty"?: ParamValueSerializedTypeMap["float"];
  "cameras--t-tz"?: ParamValueSerializedTypeMap["float"];
  "cameras--tx"?: ParamValueSerializedTypeMap["float"];
  "cameras--ty"?: ParamValueSerializedTypeMap["float"];
  "cameras--tz"?: ParamValueSerializedTypeMap["float"];
  "cameras--r"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--r-rx"?: ParamValueSerializedTypeMap["float"];
  "cameras--r-ry"?: ParamValueSerializedTypeMap["float"];
  "cameras--r-rz"?: ParamValueSerializedTypeMap["float"];
  "cameras--rx"?: ParamValueSerializedTypeMap["float"];
  "cameras--ry"?: ParamValueSerializedTypeMap["float"];
  "cameras--rz"?: ParamValueSerializedTypeMap["float"];
  "cameras--s"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--s-sx"?: ParamValueSerializedTypeMap["float"];
  "cameras--s-sy"?: ParamValueSerializedTypeMap["float"];
  "cameras--s-sz"?: ParamValueSerializedTypeMap["float"];
  "cameras--sx"?: ParamValueSerializedTypeMap["float"];
  "cameras--sy"?: ParamValueSerializedTypeMap["float"];
  "cameras--sz"?: ParamValueSerializedTypeMap["float"];
  "cameras--scale"?: ParamValueSerializedTypeMap["float"];
  "cameras--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "cameras--display"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "cameras-perspectiveCamera_MAIN--fov"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--near"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--far"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--position"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_MAIN--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_MAIN--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_MAIN--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_MAIN--name"?: ParamValueSerializedTypeMap["string"];
  "cameras-perspectiveCamera_MAIN--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "cameras-perspectiveCamera_DEBUG--fov"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--near"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--far"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--position"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_DEBUG--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_DEBUG--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_DEBUG--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_DEBUG--name"?: ParamValueSerializedTypeMap["string"];
  "cameras-perspectiveCamera_DEBUG--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "cameras-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "cameras-polarTransform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "cameras-polarTransform1--center"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-polarTransform1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "cameras-polarTransform1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "cameras-polarTransform1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "cameras-polarTransform1--centerx"?: ParamValueSerializedTypeMap["float"];
  "cameras-polarTransform1--centery"?: ParamValueSerializedTypeMap["float"];
  "cameras-polarTransform1--centerz"?: ParamValueSerializedTypeMap["float"];
  "cameras-polarTransform1--longitude"?: ParamValueSerializedTypeMap["float"];
  "cameras-polarTransform1--latitude"?: ParamValueSerializedTypeMap["float"];
  "cameras-polarTransform1--depth"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1--node"?: ParamValueSerializedTypeMap["node_path"];
  "cameras-cameraControls1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "lights--transform"?: ParamValueSerializedTypeMap["folder"];
  "lights--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "lights--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--t"?: ParamValueSerializedTypeMap["vector3"];
  "lights--t-tx"?: ParamValueSerializedTypeMap["float"];
  "lights--t-ty"?: ParamValueSerializedTypeMap["float"];
  "lights--t-tz"?: ParamValueSerializedTypeMap["float"];
  "lights--tx"?: ParamValueSerializedTypeMap["float"];
  "lights--ty"?: ParamValueSerializedTypeMap["float"];
  "lights--tz"?: ParamValueSerializedTypeMap["float"];
  "lights--r"?: ParamValueSerializedTypeMap["vector3"];
  "lights--r-rx"?: ParamValueSerializedTypeMap["float"];
  "lights--r-ry"?: ParamValueSerializedTypeMap["float"];
  "lights--r-rz"?: ParamValueSerializedTypeMap["float"];
  "lights--rx"?: ParamValueSerializedTypeMap["float"];
  "lights--ry"?: ParamValueSerializedTypeMap["float"];
  "lights--rz"?: ParamValueSerializedTypeMap["float"];
  "lights--s"?: ParamValueSerializedTypeMap["vector3"];
  "lights--s-sx"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sy"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sz"?: ParamValueSerializedTypeMap["float"];
  "lights--sx"?: ParamValueSerializedTypeMap["float"];
  "lights--sy"?: ParamValueSerializedTypeMap["float"];
  "lights--sz"?: ParamValueSerializedTypeMap["float"];
  "lights--scale"?: ParamValueSerializedTypeMap["float"];
  "lights--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "lights--display"?: ParamValueSerializedTypeMap["boolean"];
  "lights--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights-hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "lights-hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-areaLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "lights-areaLight1--color"?: ParamValueSerializedTypeMap["color"];
  "lights-areaLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--width"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--height"?: ParamValueSerializedTypeMap["float"];
  "lights-areaLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "lights-areaLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-polarTransform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--center"?: ParamValueSerializedTypeMap["vector3"];
  "lights-polarTransform1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--longitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--latitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--depth"?: ParamValueSerializedTypeMap["float"];
  "lights-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "boxes--transform"?: ParamValueSerializedTypeMap["folder"];
  "boxes--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "boxes--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "boxes--t"?: ParamValueSerializedTypeMap["vector3"];
  "boxes--t-tx"?: ParamValueSerializedTypeMap["float"];
  "boxes--t-ty"?: ParamValueSerializedTypeMap["float"];
  "boxes--t-tz"?: ParamValueSerializedTypeMap["float"];
  "boxes--tx"?: ParamValueSerializedTypeMap["float"];
  "boxes--ty"?: ParamValueSerializedTypeMap["float"];
  "boxes--tz"?: ParamValueSerializedTypeMap["float"];
  "boxes--r"?: ParamValueSerializedTypeMap["vector3"];
  "boxes--r-rx"?: ParamValueSerializedTypeMap["float"];
  "boxes--r-ry"?: ParamValueSerializedTypeMap["float"];
  "boxes--r-rz"?: ParamValueSerializedTypeMap["float"];
  "boxes--rx"?: ParamValueSerializedTypeMap["float"];
  "boxes--ry"?: ParamValueSerializedTypeMap["float"];
  "boxes--rz"?: ParamValueSerializedTypeMap["float"];
  "boxes--s"?: ParamValueSerializedTypeMap["vector3"];
  "boxes--s-sx"?: ParamValueSerializedTypeMap["float"];
  "boxes--s-sy"?: ParamValueSerializedTypeMap["float"];
  "boxes--s-sz"?: ParamValueSerializedTypeMap["float"];
  "boxes--sx"?: ParamValueSerializedTypeMap["float"];
  "boxes--sy"?: ParamValueSerializedTypeMap["float"];
  "boxes--sz"?: ParamValueSerializedTypeMap["float"];
  "boxes--scale"?: ParamValueSerializedTypeMap["float"];
  "boxes--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "boxes--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "boxes--display"?: ParamValueSerializedTypeMap["boolean"];
  "boxes--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "boxes-box1--size"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--sizes"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-box1--sizes-sizesx"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--sizes-sizesy"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--sizes-sizesz"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--sizesx"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--sizesy"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--sizesz"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--divisions"?: ParamValueSerializedTypeMap["integer"];
  "boxes-box1--center"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-box1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--centerx"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--centery"?: ParamValueSerializedTypeMap["float"];
  "boxes-box1--centerz"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--size"?: ParamValueSerializedTypeMap["vector2"];
  "boxes-plane1--size-sizex"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--size-sizey"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--sizex"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--sizey"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--useSegmentsCount"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-plane1--stepSize"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--segments"?: ParamValueSerializedTypeMap["vector2"];
  "boxes-plane1--segments-segmentsx"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--segments-segmentsy"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--segmentsx"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--segmentsy"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--direction"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-plane1--direction-directionx"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--direction-directiony"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--direction-directionz"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--directionx"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--directiony"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--directionz"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--center"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-plane1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--centerx"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--centery"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--centerz"?: ParamValueSerializedTypeMap["float"];
  "boxes-plane1--asLines"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-copy1--count"?: ParamValueSerializedTypeMap["integer"];
  "boxes-copy1--t"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-copy1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--tx"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--ty"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--tz"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--r"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-copy1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--rx"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--ry"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--rz"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--s"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-copy1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--sx"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--sy"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--sz"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--scale"?: ParamValueSerializedTypeMap["float"];
  "boxes-copy1--transformOnly"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-copy1--transformMode"?: ParamValueSerializedTypeMap["integer"];
  "boxes-copy1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "boxes-copy1--copyAttributes"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-copy1--attributesToCopy"?: ParamValueSerializedTypeMap["string"];
  "boxes-copy1--useCopyExpr"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-palette1--paletteName"?: ParamValueSerializedTypeMap["string"];
  "boxes-palette1--pickNext"?: ParamValueSerializedTypeMap["button"];
  "boxes-palette1--pickPrevious"?: ParamValueSerializedTypeMap["button"];
  "boxes-palette1--pickRandom"?: ParamValueSerializedTypeMap["button"];
  "boxes-palette1--colorsCount"?: ParamValueSerializedTypeMap["integer"];
  "boxes-palette1--color1"?: ParamValueSerializedTypeMap["color"];
  "boxes-palette1--color1-color1r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color1-color1g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color1-color1b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color1r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color1g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color1b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color2"?: ParamValueSerializedTypeMap["color"];
  "boxes-palette1--color2-color2r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color2-color2g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color2-color2b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color2r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color2g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color2b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color3"?: ParamValueSerializedTypeMap["color"];
  "boxes-palette1--color3-color3r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color3-color3g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color3-color3b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color3r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color3g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color3b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color4"?: ParamValueSerializedTypeMap["color"];
  "boxes-palette1--color4-color4r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color4-color4g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color4-color4b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color4r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color4g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color4b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color5"?: ParamValueSerializedTypeMap["color"];
  "boxes-palette1--color5-color5r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color5-color5g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color5-color5b"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color5r"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color5g"?: ParamValueSerializedTypeMap["float"];
  "boxes-palette1--color5b"?: ParamValueSerializedTypeMap["float"];
  "boxes-attribRename1--class"?: ParamValueSerializedTypeMap["integer"];
  "boxes-attribRename1--oldName"?: ParamValueSerializedTypeMap["string"];
  "boxes-attribRename1--newName"?: ParamValueSerializedTypeMap["string"];
  "boxes-material1--group"?: ParamValueSerializedTypeMap["string"];
  "boxes-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-material1--applyToChildren"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "boxes-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "boxes-attribPromote1--classFrom"?: ParamValueSerializedTypeMap["integer"];
  "boxes-attribPromote1--classTo"?: ParamValueSerializedTypeMap["integer"];
  "boxes-attribPromote1--mode"?: ParamValueSerializedTypeMap["integer"];
  "boxes-attribPromote1--name"?: ParamValueSerializedTypeMap["string"];
  "boxes-actor1--useThisNode"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-actor1--node"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-actor1-onObjectHover1--element"?: ParamValueSerializedTypeMap["integer"];
  "boxes-actor1-onObjectHover1--traverseChildren"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-actor1-onObjectHover1--pointsThreshold"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-onObjectHover1--lineThreshold"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-twoWaySwitch1--condition"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-actor1-twoWaySwitch1--ifTrue"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-twoWaySwitch1--ifFalse"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--scale"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-actor1-setObjectScale1--scale-scalex"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--scale-scaley"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--scale-scalez"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--scalex"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--scaley"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--scalez"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--mult"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--lerp"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectScale1--updateMatrix"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-actor1-floatToVec3_2--x"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-floatToVec3_2--y"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-floatToVec3_2--z"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-twoWaySwitch2--condition"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-actor1-twoWaySwitch2--ifTrue"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-twoWaySwitch2--ifFalse"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-twoWaySwitch3--condition"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-actor1-twoWaySwitch3--ifTrue"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-twoWaySwitch3--ifFalse"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectMaterialColor1--color"?: ParamValueSerializedTypeMap["color"];
  "boxes-actor1-setObjectMaterialColor1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectMaterialColor1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectMaterialColor1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectMaterialColor1--colorr"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectMaterialColor1--colorg"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectMaterialColor1--colorb"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-setObjectMaterialColor1--lerp"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-vec3ToColor1--vec3"?: ParamValueSerializedTypeMap["vector3"];
  "boxes-actor1-vec3ToColor1--vec3-vec3x"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-vec3ToColor1--vec3-vec3y"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-vec3ToColor1--vec3-vec3z"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-vec3ToColor1--vec3x"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-vec3ToColor1--vec3y"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-vec3ToColor1--vec3z"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-floatToVec3_1--x"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-floatToVec3_1--y"?: ParamValueSerializedTypeMap["float"];
  "boxes-actor1-floatToVec3_1--z"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--default"?: ParamValueSerializedTypeMap["folder"];
  "boxes-MAT-meshStandard1--color"?: ParamValueSerializedTypeMap["color"];
  "boxes-MAT-meshStandard1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--colorr"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--colorg"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--colorb"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useVertexColors"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--opacity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--textures"?: ParamValueSerializedTypeMap["folder"];
  "boxes-MAT-meshStandard1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--map"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--emissive"?: ParamValueSerializedTypeMap["color"];
  "boxes-MAT-meshStandard1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandard1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "boxes-MAT-meshStandard1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--metalness"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandard1--roughness"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "boxes-MAT-meshStandard1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--front"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--blending"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandard1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandard1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandard1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandard1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandard1--wireframeLinecap"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandard1--wireframeLinejoin"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandard1--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--default"?: ParamValueSerializedTypeMap["folder"];
  "boxes-MAT-meshStandardBuilder1--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--opacity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--textures"?: ParamValueSerializedTypeMap["folder"];
  "boxes-MAT-meshStandardBuilder1--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--map"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--emissive"?: ParamValueSerializedTypeMap["color"];
  "boxes-MAT-meshStandardBuilder1--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--emissiver"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandardBuilder1--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "boxes-MAT-meshStandardBuilder1--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--metalness"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--roughness"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--advanced"?: ParamValueSerializedTypeMap["folder"];
  "boxes-MAT-meshStandardBuilder1--setBuilderNode"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--builderNode"?: ParamValueSerializedTypeMap["node_path"];
  "boxes-MAT-meshStandardBuilder1--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--front"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--blending"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandardBuilder1--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandardBuilder1--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "boxes-MAT-meshStandardBuilder1--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--shadowPCSS"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--shadowPCSSFilterSize"?: ParamValueSerializedTypeMap["float"];
  "boxes-MAT-meshStandardBuilder1--overrideCustomMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--createCustomMatDistance"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--createCustomMatDepth"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--createCustomMatDepthDOF"?: ParamValueSerializedTypeMap["boolean"];
  "boxes-MAT-meshStandardBuilder1--colorMult"?: ParamValueSerializedTypeMap["float"];
}
